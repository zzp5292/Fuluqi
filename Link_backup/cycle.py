import matplotlib.pyplot as plt
import numpy as np
from scipy.fft import fft, fftfreq
from scipy import signal
from statsmodels.tsa.stattools import acf
from sklearn.linear_model import LinearRegression

if __name__ == "__main__":

    data = [3801.977434000001, 4096.3481889999985, 3826.4453110000004, 3837.5289110000003, 3590.0794200000005, 3803.119303999999, 3705.7321119999997, 3644.6005410000002, 3436.2194059999997, 3335.030076000002, 3303.1094349999994, 3278.479350999999, 1765.2061879999999, 4060.0213890000005, 3326.9735159999987, 3305.111833000001, 3156.696896, 3201.930175000001, 3099.243892999999, 3039.514055999999, 3010.6006859999998, 2967.3709250000006, 2901.4500090000006, 3068.2082640000017, 3180.9396169999995, 3076.746187999999, 3073.4644679999997, 3033.793296000001, 3077.1642700000007, 3073.788367, 2974.742760999998, 2975.9310799999994, 2774.587418000001, 2811.9840980000004, 2781.6718540000006, 2818.7257670000004, 2939.864283999999, 2802.4883489999997, 2811.8247890000016, 2863.7965360000007, 2839.742554000001, 2788.4779179999996, 2765.7741689999993, 2808.947821, 2755.750352000001, 2738.0348649999996, 2660.709247, 2694.2870640000006, 2594.170431999999, 2653.3042990000004, 2681.141498, 2762.4730730000006, 2571.705008, 2550.3072740000007, 2497.0211140000015, 2532.6975599999996, 2387.3087270000005, 2355.2012580000005, 2424.212105000001, 2353.157379, 2529.623200000001, 2399.703180000001, 2325.293791999999, 2455.3346210000013, 2330.385940000001, 2307.222527, 2339.0056239999994, 2407.291754, 2308.4050819999993, 2357.629159, 2239.267737, 2368.0397769999995, 2483.628782, 2509.5035289999996, 2581.284117, 2716.229065, 2627.185363000001, 2629.8127800000007, 2727.9760330000004, 2884.2825350000003, 2925.3324629999993, 2958.004050999999, 3048.4392140000004, 2980.699877, 3190.822169, 3204.4850699999993, 3515.461606000001, 3518.269079999999, 3549.386474000001, 3659.5660849999995, 3783.8374149999995, 3895.335033000001, 3948.8484949999993, 3190.822169, 4154.9944350000005, 4277.448306, 4344.337333999999, 4532.538024, 4428.662334000001, 4570.411856, 4699.911051, 4964.478499999999, 4874.721254999998, 4760.6025850000005, 5028.46031, 4920.619340999997, 5014.184958, 5180.164042, 5147.505028999998, 5289.761545000001, 5473.808023999999, 5540.623447, 5774.077293, 5467.733674000003, 5769.557745999998, 6020.500520999998, 6148.9292890000015, 5965.272742999999, 6145.03799, 6138.571877999996, 6219.544631000002, 6223.297225999999, 6361.596005999999, 6438.782029, 6589.217519000002, 6395.947027999998, 6538.249722999999, 6404.883168999998, 6487.951927, 6474.019276000003, 6415.667229, 6449.144069000001, 6514.696367999999, 6499.134347999999, 6398.984205, 6244.598889999998, 6512.789163999998, 6377.827382999999, 6389.810161999994, 6364.839498, 6497.685769999999, 6382.962064, 6545.288839, 6481.3230140000005, 6685.373945999999, 6781.156906, 6552.002243, 6658.715426000001, 6806.93762, 6706.757795999999, 6833.1155629999985, 6863.779702000001, 6761.648354999999, 6741.892247000002, 7297.5745019999995, 6967.085444999997, 6950.529264, 6777.531705999998, 6800.0174259999985, 6769.853499, 6606.244383999998, 6704.111496, 6833.04665, 6862.835435999997, 6759.146752000002, 6830.76806, 6885.293343999999, 6988.870546999998, 7076.861318000001, 7301.905327999999, 7143.124274000001, 7079.630242, 7332.216185, 7106.65667, 7181.611014, 7168.504843000001, 6931.5081249999985, 7503.253085000002, 7575.154282999999, 7649.832116999998, 7035.257585, 7330.290894, 7294.851617999999, 7614.254085000001, 7485.143292000001, 7347.384271000001, 7450.000534999999, 7463.4338050000015, 7085.154434999998, 6756.597465000001, 6356.671418, 6518.6593920000005, 6518.6593920000005, 6813.634171000003, 6693.602549000001, 6461.992671000001, 6482.805404000001, 6423.137519000001, 6703.897149999999, 6603.720987999999, 6565.0538979999965, 6584.477117999999, 6632.459248, 6581.356875000001, 6895.67299, 6566.198958000001, 6444.185061000002, 6453.051978999998, 6337.824457000001, 6146.645475999999, 6377.709370999999, 6020.618167, 6259.0295209999995, 6496.259018000001, 6255.181058000001, 6466.470719999999, 6051.936368000001, 5742.1208289999995, 5693.149485, 5534.695878999999, 5441.703541999999, 5273.997670000002, 5354.306110999999, 5455.428751000002, 5438.809744000002, 5266.499434, 5304.181513999997, 5211.598204999999, 5164.759506999999, 5287.28694, 5445.91461, 5459.248728000001, 5310.625262999999, 5672.199516999999, 5586.6616269999995, 5251.782111999999, 5075.608131999999, 5009.362324999999, 5014.856172999998, 4961.211247, 4972.550804000001, 5161.137339999998, 4807.407345000001, 4909.2931640000015, 4987.786545000001, 4796.9117179999985, 4899.468911999998, 4875.261423999999, 4860.497991000001, 4882.382798, 4843.195943000001, 4898.632440000002, 4910.2984799999995, 4838.217769999998, 4851.785750000002, 4775.676039, 4910.566715, 4807.4472570000025, 4659.007891, 4702.840131, 4542.3024479999995, 4670.5154219999995, 4473.275638, 4564.712575999999, 4452.388422, 4645.386172999998, 5123.033137, 5273.223138, 5268.624589000001, 4699.413382, 4702.996122999998, 4339.205937, 4308.39367, 4422.641850999999, 4600.616275, 5084.215525999998, 4277.846807999999, 4300.933903000001, 5321.102963, 5060.157164000001, 4851.969722999999, 5073.333913999999, 5651.388393999997, 5376.852915999998, 4552.0850199999995, 3801.635069000001, 3852.0297330000003]
    data = data[60:120]

    window_size = 12
    threshold = 1.5

    regressor = LinearRegression()

    time_series_replaced = np.array(data)

    # 迭代遍历时间序列
    for i in range(len(data) - window_size + 1):
        window = data[i:i + window_size]

        if np.max(window) - np.min(window) > threshold:

            X = np.arange(i, i + window_size).reshape(-1, 1)
            y = np.array(window)

            regressor.fit(X, y)
            y_pred = regressor.predict(X)

            # 用预测值替换窗口内的异常值
            outliers = np.where(np.abs(y - y_pred) > threshold)[0]
            for idx in outliers:
                time_series_replaced[i + idx] = y_pred[idx]

    print("Replaced Time Series:")
    print(list(time_series_replaced))
    print(len(time_series_replaced))

    mean = np.mean(time_series_replaced)
    std = np.std(time_series_replaced)

    time_series_replaced = (time_series_replaced - mean) / std
    N = 60
    f_s = 10
    f_values = np.linspace(0.0, f_s / 2.0, N // 2)
    fft_values_ = np.fft.rfft(time_series_replaced)
    power = np.abs(fft_values_)
    sample_freq = 2.0 / N * np.abs(fft_values_[0:N // 2])


    plt.plot(f_values, sample_freq)
    plt.xlabel('Frequency', fontdict={'family': 'Times New Roman', 'size': 20})
    plt.ylabel('Amplitude', fontdict={'family': 'Times New Roman', 'size': 20})
    #plt.title('Frequency Domain')
    plt.show()

    pos_mask = np.where(sample_freq > 0)
    freqs = sample_freq[pos_mask]
    powers = power[pos_mask]

    top_k_seasons = 10
    top_k_idxs = np.argpartition(powers, -top_k_seasons)[-top_k_seasons:]
    top_k_power = powers[top_k_idxs]
    fft_periods = (1 / freqs[top_k_idxs]).astype(int)

    print(f"top_k_power: {top_k_power}")
    print(f"fft_periods: {fft_periods}")

    for lag in fft_periods:
        acf_score = acf(data, nlags=lag)[-1]
        print(f"lag: {lag} fft acf: {acf_score}")

    plt.plot(time_series_replaced)
    plt.xlabel('Time', fontdict={'family': 'Times New Roman', 'size': 20})
    plt.ylabel('Network traffic', fontdict={'family': 'Times New Roman', 'size': 20})
    plt.show()